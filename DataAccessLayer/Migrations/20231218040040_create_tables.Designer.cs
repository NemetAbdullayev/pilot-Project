// <auto-generated />
using System;
using DataAccessLayer.Concrete.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231218040040_create_tables")]
    partial class create_tables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EntityLayer.Concrete.Building.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BuildingFeatureId")
                        .HasColumnType("integer");

                    b.Property<string>("IdValue")
                        .HasColumnType("text");

                    b.Property<int?>("PropertiesId")
                        .HasColumnType("integer");

                    b.Property<Geometry>("geometry")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.HasIndex("BuildingFeatureId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Building.BuildingFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BuildingFeatures");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Building.BuildingProperties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("addrcity")
                        .HasColumnType("text");

                    b.Property<string>("addrcountry")
                        .HasColumnType("text");

                    b.Property<string>("addrhousenumber")
                        .HasColumnType("text");

                    b.Property<string>("addrpostcode")
                        .HasColumnType("text");

                    b.Property<string>("addrstreet")
                        .HasColumnType("text");

                    b.Property<string>("amenity")
                        .HasColumnType("text");

                    b.Property<string>("bathopen_air")
                        .HasColumnType("text");

                    b.Property<string>("bathsand_bath")
                        .HasColumnType("text");

                    b.Property<string>("building")
                        .HasColumnType("text");

                    b.Property<string>("buildinglevels")
                        .HasColumnType("text");

                    b.Property<string>("charge")
                        .HasColumnType("text");

                    b.Property<string>("fee")
                        .HasColumnType("text");

                    b.Property<string>("geotype")
                        .HasColumnType("text");

                    b.Property<int?>("index")
                        .HasColumnType("integer");

                    b.Property<string>("leisure")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("opening_hours")
                        .HasColumnType("text");

                    b.Property<string>("opening_hourscovid19")
                        .HasColumnType("text");

                    b.Property<string>("paymentcash")
                        .HasColumnType("text");

                    b.Property<string>("paymentmastercard")
                        .HasColumnType("text");

                    b.Property<string>("paymentvisa")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BuildingProperties");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Point.Poi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IdValue")
                        .HasColumnType("text");

                    b.Property<int?>("PoiFeatureId")
                        .HasColumnType("integer");

                    b.Property<int?>("PropertiesId")
                        .HasColumnType("integer");

                    b.Property<Geometry>("geometry")
                        .HasColumnType("geometry");

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PoiFeatureId");

                    b.ToTable("Poi");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Point.PoiFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PoiFeatures");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Road.Road", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IdValue")
                        .HasColumnType("text");

                    b.Property<int?>("PropertiesId")
                        .HasColumnType("integer");

                    b.Property<int?>("RoadFeatureId")
                        .HasColumnType("integer");

                    b.Property<Geometry>("geometry")
                        .HasColumnType("geometry");

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoadFeatureId");

                    b.ToTable("Roads");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Road.RoadFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoadFeatures");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Road.RoadProperties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("alt_name")
                        .HasColumnType("text");

                    b.Property<string>("covered")
                        .HasColumnType("text");

                    b.Property<string>("geotype")
                        .HasColumnType("text");

                    b.Property<string>("highway")
                        .HasColumnType("text");

                    b.Property<int?>("index")
                        .HasColumnType("integer");

                    b.Property<string>("int_ref")
                        .HasColumnType("text");

                    b.Property<string>("junction")
                        .HasColumnType("text");

                    b.Property<string>("layer")
                        .HasColumnType("text");

                    b.Property<string>("maxspeed")
                        .HasColumnType("text");

                    b.Property<string>("maxwidth")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("nameaz")
                        .HasColumnType("text");

                    b.Property<string>("nameen")
                        .HasColumnType("text");

                    b.Property<string>("nameru")
                        .HasColumnType("text");

                    b.Property<string>("old_name")
                        .HasColumnType("text");

                    b.Property<string>("old_nameru")
                        .HasColumnType("text");

                    b.Property<string>("oneway")
                        .HasColumnType("text");

                    b.Property<string>("surface")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoadProperties");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Building.Building", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Building.BuildingFeature", null)
                        .WithMany("features")
                        .HasForeignKey("BuildingFeatureId");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Point.Poi", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Point.PoiFeature", null)
                        .WithMany("features")
                        .HasForeignKey("PoiFeatureId");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Road.Road", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Road.RoadFeature", null)
                        .WithMany("features")
                        .HasForeignKey("RoadFeatureId");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Building.BuildingFeature", b =>
                {
                    b.Navigation("features");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Point.PoiFeature", b =>
                {
                    b.Navigation("features");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Road.RoadFeature", b =>
                {
                    b.Navigation("features");
                });
#pragma warning restore 612, 618
        }
    }
}
